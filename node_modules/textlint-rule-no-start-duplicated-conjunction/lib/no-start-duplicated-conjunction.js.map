{"version":3,"sources":["../src/no-start-duplicated-conjunction.js"],"names":["splitAST","require","SentenceSyntax","Syntax","defaultOptions","interval","PointingPattern","getFirstPhrase","node","test","value","phrases","split","length","trim","module","exports","context","options","helper","ignoreNodeManager","getSource","report","RuleError","previousPhases","useDuplicatedPhase","addUsedPhase","unshift","phase","slice","Header","HorizontalRule","Paragraph","ignoreTypes","Code","Link","Image","BlockQuote","Emphasis","isChildNode","ignoreChildrenByTypes","sentences","children","filter","sentence","type","Sentence","forEach","firstChild","Str","phrase","indexOf","isIgnored"],"mappings":"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","file":"no-start-duplicated-conjunction.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper, IgnoreNodeManager } from \"textlint-rule-helper\";\nimport ObjectAssign from \"object-assign\";\n\nconst splitAST = require(\"sentence-splitter\").splitAST;\nconst SentenceSyntax = require(\"sentence-splitter\").Syntax;\n\nconst defaultOptions = {\n    interval: 2\n};\nconst PointingPattern = /[、,]/;\n\n// conjunction\n/**\n * get first node value\n * @param node\n * @returns {string}\n */\nfunction getFirstPhrase(node) {\n    if (!PointingPattern.test(node.value)) {\n        return \"\";\n    }\n    const phrases = node.value.split(PointingPattern);\n    if (phrases.length > 0) {\n        return phrases[0].trim();\n    }\n    return \"\";\n}\n\nmodule.exports = function(context, options = {}) {\n    options = ObjectAssign({}, defaultOptions, options);\n    const helper = new RuleHelper(context);\n    const ignoreNodeManager = new IgnoreNodeManager();\n    const { Syntax, getSource, report, RuleError } = context;\n    let previousPhases = [];\n    let useDuplicatedPhase = false;\n    const addUsedPhase = phase => {\n        // Add first item\n        previousPhases.unshift(phase);\n        // slice by interval\n        // max limit `interval`\n        previousPhases = previousPhases.slice(0, options.interval);\n    };\n    return {\n        // reset count\n        [Syntax.Header]() {\n            previousPhases = [];\n        },\n        [Syntax.HorizontalRule]() {\n            previousPhases = [];\n        },\n        [Syntax.Paragraph](node) {\n            // FIXME: linkReference should be defined in TxtAST.\n            const ignoreTypes = [\n                Syntax.Code,\n                Syntax.Link,\n                \"linkReference\",\n                Syntax.Image,\n                Syntax.BlockQuote,\n                Syntax.Emphasis\n            ];\n            if (helper.isChildNode(node, ignoreTypes)) {\n                return;\n            }\n            ignoreNodeManager.ignoreChildrenByTypes(node, ignoreTypes);\n            const sentences = splitAST(node).children.filter(sentence => {\n                return sentence.type === SentenceSyntax.Sentence;\n            });\n            sentences.forEach(sentence => {\n                const firstChild = sentence.children[0];\n                if (!firstChild) {\n                    return addUsedPhase(\"\");\n                }\n                if (firstChild.type !== Syntax.Str) {\n                    return addUsedPhase(\"\");\n                }\n                const phrase = getFirstPhrase(firstChild);\n                // add first item\n                if (phrase.length === 0) {\n                    return addUsedPhase(\"\");\n                }\n                if (previousPhases.indexOf(phrase) !== -1) {\n                    useDuplicatedPhase = true;\n                }\n                if (useDuplicatedPhase) {\n                    // adjust index\n                    // if  \"また、[import, a.js](a.js)\" then originalIndex is used.\n                    // if \"[import, binary-example.js](src/binary-example.js)\" then  originalIndex is undefined.\n                    if (!ignoreNodeManager.isIgnored(firstChild)) {\n                        report(firstChild, new RuleError(`Don't repeat \"${phrase}\" in ${options.interval} phrases`));\n                    }\n                    useDuplicatedPhase = false;\n                }\n                addUsedPhase(phrase);\n            });\n        }\n    };\n};\n"]}