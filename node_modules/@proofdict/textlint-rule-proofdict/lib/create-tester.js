// MIT Â© 2017 azu
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDictionary = exports.createTester = void 0;

var _mode = require("./mode");

var _dictionaryStorage = require("./dictionary-storage");

var _require = require("@proofdict/tester"),
    ProofdictTester = _require.ProofdictTester;

var currentTester = null;
var checkedLastTime = -1;
/**
 * @param {number} lastUpdated
 * @param {*} dictionary
 * @param {string[]} whitelistTags
 * @param {string[]}  blacklistTags
 * @param {boolean}  disableTesterCache
 * @returns {ProofdictTester}
 */

var createTester = function createTester(_ref) {
  var lastUpdated = _ref.lastUpdated,
      dictionary = _ref.dictionary,
      whitelistTags = _ref.whitelistTags,
      blacklistTags = _ref.blacklistTags,
      disableTesterCache = _ref.disableTesterCache;

  if (disableTesterCache || currentTester === null && checkedLastTime < lastUpdated) {
    checkedLastTime = lastUpdated;
    currentTester = new ProofdictTester({
      dictionary: dictionary,
      whitelistTags: whitelistTags,
      blacklistTags: blacklistTags
    });
    return currentTester;
  }

  return currentTester;
};
/**
 * @param options
 * @param {string} mode
 * @returns {*}
 */


exports.createTester = createTester;

var getDictionary = function getDictionary(options, mode) {
  // prefer `dictionary` option
  if (options.proofdict !== undefined) {
    return options.proofdict;
  }

  var proofDictData; // NETWORK

  if (mode === _mode.MODE.NETWORK) {
    try {
      var cachedProofdict = _dictionaryStorage.storage.getItem("proofdict");

      proofDictData = JSON.parse(cachedProofdict);
    } catch (error) {
      _dictionaryStorage.storage.removeItem("proofdict");
    }
  } // LOCAL


  if (mode === _mode.MODE.LOCAL) {// TODO: not implemented
  }

  return proofDictData;
};

exports.getDictionary = getDictionary;
//# sourceMappingURL=create-tester.js.map