{"version":3,"sources":["../src/create-tester.js"],"names":["require","ProofdictTester","currentTester","checkedLastTime","createTester","lastUpdated","dictionary","whitelistTags","blacklistTags","disableTesterCache","getDictionary","options","mode","proofdict","undefined","proofDictData","MODE","NETWORK","cachedProofdict","storage","getItem","JSON","parse","error","removeItem","LOCAL"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;eAE4BA,OAAO,CAAC,mBAAD,C;IAA3BC,e,YAAAA,e;;AACR,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,eAAe,GAAG,CAAC,CAAvB;AACA;;;;;;;;;AAQO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAmF;AAAA,MAAhFC,WAAgF,QAAhFA,WAAgF;AAAA,MAAnEC,UAAmE,QAAnEA,UAAmE;AAAA,MAAvDC,aAAuD,QAAvDA,aAAuD;AAAA,MAAxCC,aAAwC,QAAxCA,aAAwC;AAAA,MAAzBC,kBAAyB,QAAzBA,kBAAyB;;AAC3G,MAAIA,kBAAkB,IAAKP,aAAa,KAAK,IAAlB,IAA0BC,eAAe,GAAGE,WAAvE,EAAqF;AACjFF,IAAAA,eAAe,GAAGE,WAAlB;AACAH,IAAAA,aAAa,GAAG,IAAID,eAAJ,CAAoB;AAChCK,MAAAA,UAAU,EAAVA,UADgC;AAEhCC,MAAAA,aAAa,EAAbA,aAFgC;AAGhCC,MAAAA,aAAa,EAAbA;AAHgC,KAApB,CAAhB;AAKA,WAAON,aAAP;AACH;;AACD,SAAOA,aAAP;AACH,CAXM;AAaP;;;;;;;;;AAKO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,IAAV,EAAmB;AAC5C;AACA,MAAID,OAAO,CAACE,SAAR,KAAsBC,SAA1B,EAAqC;AACjC,WAAOH,OAAO,CAACE,SAAf;AACH;;AACD,MAAIE,aAAJ,CAL4C,CAM5C;;AACA,MAAIH,IAAI,KAAKI,WAAKC,OAAlB,EAA2B;AACvB,QAAI;AACA,UAAMC,eAAe,GAAGC,2BAAQC,OAAR,CAAgB,WAAhB,CAAxB;;AACAL,MAAAA,aAAa,GAAGM,IAAI,CAACC,KAAL,CAAWJ,eAAX,CAAhB;AACH,KAHD,CAGE,OAAOK,KAAP,EAAc;AACZJ,iCAAQK,UAAR,CAAmB,WAAnB;AACH;AACJ,GAd2C,CAe5C;;;AACA,MAAIZ,IAAI,KAAKI,WAAKS,KAAlB,EAAyB,CACrB;AACH;;AACD,SAAOV,aAAP;AACH,CApBM","sourcesContent":["// MIT Â© 2017 azu\n\"use strict\";\nimport { MODE } from \"./mode\";\nimport { storage } from \"./dictionary-storage\";\n\nconst { ProofdictTester } = require(\"@proofdict/tester\");\nlet currentTester = null;\nlet checkedLastTime = -1;\n/**\n * @param {number} lastUpdated\n * @param {*} dictionary\n * @param {string[]} whitelistTags\n * @param {string[]}  blacklistTags\n * @param {boolean}  disableTesterCache\n * @returns {ProofdictTester}\n */\nexport const createTester = ({ lastUpdated, dictionary, whitelistTags, blacklistTags, disableTesterCache }) => {\n    if (disableTesterCache || (currentTester === null && checkedLastTime < lastUpdated)) {\n        checkedLastTime = lastUpdated;\n        currentTester = new ProofdictTester({\n            dictionary,\n            whitelistTags,\n            blacklistTags\n        });\n        return currentTester;\n    }\n    return currentTester;\n};\n\n/**\n * @param options\n * @param {string} mode\n * @returns {*}\n */\nexport const getDictionary = (options, mode) => {\n    // prefer `dictionary` option\n    if (options.proofdict !== undefined) {\n        return options.proofdict;\n    }\n    let proofDictData;\n    // NETWORK\n    if (mode === MODE.NETWORK) {\n        try {\n            const cachedProofdict = storage.getItem(\"proofdict\");\n            proofDictData = JSON.parse(cachedProofdict);\n        } catch (error) {\n            storage.removeItem(\"proofdict\");\n        }\n    }\n    // LOCAL\n    if (mode === MODE.LOCAL) {\n        // TODO: not implemented\n    }\n    return proofDictData;\n};\n"],"file":"create-tester.js"}